@model Identity.Models.User

@{
    ViewData["Title"] = "View";
}

<h1>Login</h1>

<h4>User</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Index" id="loginForm">

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Username" class="control-label"></label>
                <input asp-for="Username" class="form-control" />
                <span asp-validation-for="Username" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Password" class="control-label"></label>
                <input asp-for="Password" class="form-control" type="password" />
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Login" class="btn btn-primary" />
            </div>
        </form>
    </div>
 
</div>

<script>
    async function getToken(formData) {
        try {
            const response = await fetch("https://localhost:7206/connect/token", {
                method: "POST",
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded",
                },
                body: new URLSearchParams(formData),
            });
            if (!response.ok) {
                throw new Error("Network response was not ok");
            }
            const data = await response.json();
            return data.access_token;
        } catch (error) {
            console.error("Error:", error);
            throw error;
        }
    }

    document.getElementById("loginForm").addEventListener("submit", async function (event) {
        event.preventDefault();

        const formData = new FormData(this);
        formData.append("grant_type", "client_credentials");
        formData.set("client_id", "service-worker");
        formData.set("client_secret", "388D45FA-B36B-4988-BA59-B187D329C207");

        try {
            const token = await getToken(formData);
            console.log(token);
            window.location.href = `@ViewBag.RedirectUri?token=${token}`;
        } catch (error) {
            console.error("Error:", error);
        }
    });
</script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

}
